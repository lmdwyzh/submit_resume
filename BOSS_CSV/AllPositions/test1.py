import pandas as pd
import requests
import json
import time

from Game_assistance.ToolCategory.ToolCategory import ToolCategory

# ---------------- 配置 ----------------
FILE_NAME = "boss_positions.xlsx"
SHEET_NAME = "职位层级表"
# 1. 追加列名
# 应改为（与Excel表头一致）：
NEED_COLS = [
    "任务复杂性",
    "脑力工作负荷",
    "体力工作负荷",
    "人才稀缺性",
    "协作与沟通复杂度",
    "环境适应性",
    "学习与成长速度",
    "加班情况等级",
    "每天实际工作时长_min",
    "每天实际工作时长_max",
    "每月薪资_min",
    "每月薪资_max",
    "工作负荷总分",
    "工作内容"  # 注意这个应该在最后
]

tool_category = ToolCategory()
API_KEY = tool_category.KIMIKEY
URL = "https://api.moonshot.cn/v1/chat/completions"
HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}


# ---------------- 提示词 ----------------
def build_prompt(main_category: str, sub_category: str, job: str) -> str:
    print(f"{main_category}  {sub_category}  {job}")
    return f"""
你是一位资深人力资源数据分析师，熟悉中国大陆各行业职位的真实工作强度与薪资水平。

请根据以下信息，对职位{main_category}中{sub_category}的「{job}」职位进行打分并输出区间数据：

1. 任务复杂性
定义：任务在技术层面所具备的难度、流程环节的复杂程度以及面临的不确定性情况。
1级：简单且重复性的任务，执行过程无需专业培训，操作模式固定，例如数据录入工作，只需按照既定格式将数据输入系统即可。
2级：基础操作类任务，需要接受少量培训以掌握基本操作流程和规范，例如设备基础维护，工作人员经过简单培训就能进行设备的日常清洁、简单故障排查与处理等基础操作。
3级：任务执行需要具备专业知识，同时要处理多个相互关联的变量问题，例如故障排查，工作人员不仅要熟悉设备原理，还需综合分析各种可能影响设备运行的因素来找出故障根源。
4级：高度复杂的任务，往往需要跨领域知识融合或具备创新能力才能完成，例如系统架构设计，涉及计算机科学、网络技术、项目管理等多个领域知识，且需要设计出创新性的架构方案以满足特定需求。
5级：前沿性、模糊性极强的任务，没有现成的模式和方法可供借鉴，需要突破性思维来探索解决方案，例如原创算法研究，研究人员需要在未知领域开拓创新，提出全新的算法理论和方法。

2. 脑力工作负荷
定义：任务对执行者认知能力、专注力以及决策深度的要求程度。
1级：几乎无需思考，任务过程可实现自动化操作，例如监控仪表盘，工作人员只需偶尔查看仪表盘数据是否正常，无需进行深入分析和决策。
2级：需要低强度思考，执行过程中只需间歇性投入注意力，例如常规报告整理，按照既定模板和要求对数据进行简单汇总和整理即可。
3级：要求中等程度的持续专注，需要进行分析或规划工作，例如项目管理，项目负责人需要持续关注项目进度、资源分配等情况，并进行合理的分析和规划以确保项目顺利进行。
4级：涉及高强度脑力活动，需要在复杂情况下做出深度决策，例如危机公关，公关团队要在短时间内分析危机事件的各个方面，权衡各种利弊后制定出有效的应对策略。
5级：带来极高认知负荷，要求执行者在长期高压状态下进行深入思考，例如战略级研发，研发团队需要从长远角度出发，对技术发展趋势、市场需求等多方面因素进行深度研究和思考，制定出具有前瞻性的研发战略。

3. 体力工作负荷
定义：任务对执行者体力消耗、耐力以及身体灵活性的要求程度。
1级：完全静态的工作，基本无体力消耗，例如办公室文书工作，主要在办公桌前进行文件处理、资料查阅等工作，无需进行体力活动。
2级：存在轻度体力活动，偶尔需要进行搬运等工作，例如仓库拣货，工作人员需要在仓库内走动挑选货物，偶尔搬运一些较轻的物品。
3级：需要中等体力消耗，例如设备安装，工作人员需要搬运和安装较重的设备部件，进行一定强度的体力劳动。
4级：高强度劳动，例如急救医护，在紧急救援现场，医护人员需要快速搬运患者、进行急救操作等，体力消耗极大。
5级：极限体力需求，例如消防员抢险，消防员在火灾、地震等灾害现场需要进行高强度的救援行动，如攀爬、破拆、长时间作战等，对体力是极大的挑战。

4. 人才稀缺性
定义：市场上符合该岗位要求的人才供给数量与需求数量的匹配情况。
1级：劳动力市场充足，岗位无特殊技能要求，例如零售店员，一般经过简单培训即可上岗，市场上求职者数量众多。
2级：需要接受基础培训，市场供应相对稳定，例如客服代表，通过短期培训掌握基本沟通技巧和业务知识后即可胜任，市场上有一定数量的符合要求的人才。
3级：需要具备专业技能，人才供需基本平衡，例如会计师，需要掌握专业的会计知识和技能，通过相关考试取得证书，市场上供需关系较为稳定。
4级：属于高门槛领域，人才供不应求，例如芯片工程师，需要具备深厚的电子工程、半导体物理等专业知识和丰富的实践经验，市场上此类高端专业人才数量有限。
5级：顶尖专家级别，全球范围内都非常稀缺，例如量子科学家，在量子科学领域进行前沿研究，需要具备极高的学术造诣和创新能力，全球范围内此类人才屈指可数。

7. 协作与沟通复杂度
定义：岗位在工作过程中对内、对外协作的深度和难度情况。
1级：主要独立工作，无需频繁与他人沟通协作，例如实验室检测员，按照既定流程和标准独立完成样品检测工作，与其他人员沟通较少。
2级：进行基础团队协作，例如部门内配合，团队成员之间有一定的分工合作，但沟通协作相对简单，主要围绕部门内日常工作任务展开。
3级：需要跨部门协调，例如项目经理，要与不同部门的人员沟通协调，整合各方资源，确保项目顺利推进，沟通协调工作较为复杂。
4级：管理复杂利益方，例如政府关系顾问，需要与政府各部门、企业、社会组织等多方利益相关者进行沟通和协调，处理各种复杂的关系和问题，沟通协调难度较大。
5级：负责全球化团队领导，例如跨国公司CEO，要领导来自不同国家和文化背景的团队成员，协调全球范围内的业务运营，面临着语言、文化、时区等多方面的挑战，沟通协作复杂度极高。

8. 环境适应性
定义：工作环境对执行者身心所构成的挑战程度。
1级：工作环境稳定舒适，例如空调办公室，温度、湿度、光线等条件适宜，为工作人员提供了良好的工作条件。
2级：存在轻度不适，例如短期户外工作，可能会受到天气变化、噪音等轻微影响，但总体影响不大。
3级：工作环境恶劣需要适应，例如高温工厂，工作人员需要在高温、嘈杂等恶劣环境下长时间工作，对身体和心理都是一种考验。
4级：处于高危或极端环境，例如深海作业，工作人员要面临高压、低温、黑暗等极端环境，同时还存在各种潜在的危险，对身心挑战极大。
5级：面临不可预测的生存挑战，例如宇航员，在太空环境中要应对微重力、辐射、太空垃圾等不可预测的因素，生存面临巨大挑战。

9. 学习与成长速度
定义：岗位对执行者技能更新和知识迭代的要求程度。
1级：技能相对稳定，无需持续学习新知识，例如传统手工业，手工艺人的技能传承相对固定，在一定时期内无需进行大规模的知识更新。
2级：需要周期性培训，例如设备操作员，随着设备的更新换代，需要定期参加培训以掌握新设备的操作方法和维护技巧。
3级：要求定期学习新工具，例如IT技术支持，需要不断学习新的软件、硬件工具和技术，以解决用户遇到的各种问题。
4级：处于快速迭代领域，例如AI工程师，人工智能技术发展迅速，工程师需要不断学习最新的算法、模型和技术架构，以跟上行业发展的步伐。
5级：需要终身学习，持续跟踪前沿知识，例如学术研究者，为了在学术领域取得突破，需要不断关注国际前沿研究动态，持续学习和探索新知识。

10. 加班情况等级
定义：加班情况
1级：几乎不加班，严格遵循标准每日8小时工作制，工作与生活时间分配合理。例如一些行政后勤岗位，日常工作任务量适中，能在正常工作时间内完成，基本无需额外加班。
2级：偶尔加班，每日加班时间少于1小时。通常是由于临时性工作任务增加，如突然接到上级安排的紧急资料整理任务；或是遇到紧急情况需要处理，像客服岗位遇到客户临时提出的复杂问题需当即解决等，导致偶尔需要加班。例如文案策划岗位，偶尔因项目紧急交付，需在当天额外花不到1小时完善文案细节。
3级：周期性加班，每日加班时间在1 - 2小时之间。加班情况与工作周期或业务高峰期相关，具有一定的规律性。例如财务部门在月底、年底结算期间，为完成大量财务数据的核算、报表生成等工作，在这段特定时期内每日可能需要加班1 - 2小时。
4级：高频加班，每日加班时间在2 - 4小时之间。工作任务繁重且时间紧迫，员工需要投入大量额外时间才能完成工作。例如互联网公司的产品研发岗位，在项目上线前的关键阶段，为确保项目按时交付，开发人员可能需要每日加班2 - 4小时进行代码编写、测试和修复漏洞等工作。
5级：极端加班，每日加班时间超过4小时，长期处于高强度工作状态，对身心健康影响较大。例如一些创业公司的核心团队成员，为了推动公司快速发展、抢占市场先机，可能每天除了正常的8小时工作外，还需额外工作4小时以上，加班成为日常工作的一部分，长期持续这种状态。



4. 每天实际工作时长根据前面加班情况和实际情况估算（小时，区间值，如 9.0-11.0）
5. 每月税前薪资产,参考三线城市工资，一定要广泛查阅工资数据,评估并给出最合适的区间（人民币整数区间，如 1256-51562）
6. 用 2-3 句话详细描述该职位日常工作内容，必要时举例说明。
请严格按 JSON 返回，不要解释：
{{
  "任务复杂性": 4,
  "脑力工作负荷": 1,
  "体力工作负荷": 1,
  "人才稀缺性": 1,
  "协作与沟通复杂度": 1,
  "环境适应性": 1,
  "学习与成长速度": 1,
  "加班情况等级": 1,
  "每天实际工作时长": "9.0-11.0",
  "每月薪资": "1000-20000",
  "工作负荷总分": 0,
  "工作内容": "主要负责……"
}}
"""


# ---------------- 调用 API ----------------
def ask_kimi(main_category: str, sub_category: str, job_title: str):
    payload = {
        "model": "moonshot-v1-8k",
        "messages": [{"role": "user", "content": build_prompt(main_category, sub_category, job_title)}],
        "max_tokens": 400
    }
    try:
        r = requests.post(URL, headers=HEADERS, json=payload, timeout=30)
        # print(r.text)
        if r.status_code == 200:
            return json.loads(r.json()["choices"][0]["message"]["content"])
    except Exception as e:
        print(f"[ERROR] {job_title} -> {e}")
    return None


# ---------------- 主循环：逐行实时回填 ----------------
while True:
    df = pd.read_excel(FILE_NAME, sheet_name=SHEET_NAME)
    for c in NEED_COLS:
        if c not in df.columns:
            df[c] = None

    todo_idx = None
    for idx, row in df.iterrows():
        if pd.isna(row.get("任务复杂性")):
            todo_idx = idx
            break

    if todo_idx is None:
        print("✅ 所有缺失字段已补全，任务结束。")
        break

    main_category = df.at[todo_idx, "主分类"]
    sub_category = df.at[todo_idx, "子分类"]
    job = df.at[todo_idx, "职位"]
    print(f"正在处理：{main_category}/{sub_category}/{job} (行号 {todo_idx})")

    data = ask_kimi(main_category, sub_category, job)
    if not data:
        print("  获取失败，跳过。")
        time.sleep(1)
        continue

    # 应改为：
    df.at[todo_idx, "任务复杂性"] = data["任务复杂性"]
    df.at[todo_idx, "脑力工作负荷"] = data["脑力工作负荷"]
    df.at[todo_idx, "体力工作负荷"] = data["体力工作负荷"]
    df.at[todo_idx, "人才稀缺性"] = data["人才稀缺性"]
    df.at[todo_idx, "协作与沟通复杂度"] = data["协作与沟通复杂度"]
    df.at[todo_idx, "环境适应性"] = data["环境适应性"]
    df.at[todo_idx, "学习与成长速度"] = data["学习与成长速度"]
    df.at[todo_idx, "加班情况等级"] = data["加班情况等级"]
    # 计算总分
    df.at[todo_idx, "工作负荷总分"] = (
            data["脑力工作负荷"] + data["体力工作负荷"]
    )

    # 解析区间
    hrs = data["每天实际工作时长"].split("-")
    salary = data["每月薪资"].split("-")
    df.at[todo_idx, "每天实际工作时长_min"] = float(hrs[0])
    df.at[todo_idx, "每天实际工作时长_max"] = float(hrs[1])
    df.at[todo_idx, "每月薪资_min"] = int(salary[0])
    df.at[todo_idx, "每月薪资_max"] = int(salary[1])
    df["工作内容"] = df["工作内容"].astype(str)
    # 然后再赋值
    df.at[todo_idx, "工作内容"] = data["工作内容"]  # 不需要 str() 也可以

    # 立即覆盖原文件
    with pd.ExcelWriter(FILE_NAME, mode="a", if_sheet_exists="overlay", engine="openpyxl") as writer:
        df.to_excel(writer, sheet_name=SHEET_NAME, index=False)
    # 控制台实时打印
    # print(json.dumps(data, ensure_ascii=False, indent=2)["工作内容"])
    print(data["工作内容"])
    # print("  已实时保存。")
    time.sleep(21)  # QPS 保护